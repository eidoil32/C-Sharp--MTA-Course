<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="breakup_massage" xml:space="preserve">
    <value>Good bye my friend </value>
  </data>
  <data name="choose_action" xml:space="preserve">
    <value>Which action would you like to do</value>
  </data>
  <data name="continue_massage" xml:space="preserve">
    <value>Would you like to do another action
1) yes 
2) no</value>
  </data>
  <data name="title_car" xml:space="preserve">
    <value>Car</value>
  </data>
  <data name="title_electric_car" xml:space="preserve">
    <value>Electric Car</value>
  </data>
  <data name="title_electric_motorcycle" xml:space="preserve">
    <value>Electric Motorcycle</value>
  </data>
  <data name="title_motorcycle" xml:space="preserve">
    <value>Motorcycle</value>
  </data>
  <data name="title_truck" xml:space="preserve">
    <value>Truck</value>
  </data>
  <data name="welcome_massage" xml:space="preserve">
    <value>Welcome to the best Garage in the city</value>
  </data>
  <data name="invalid_integer" xml:space="preserve">
    <value>You enter invalid number, please enter again.</value>
  </data>
  <data name="choose_type_of_vehicle" xml:space="preserve">
    <value>Choose vehicle type:</value>
  </data>
  <data name="enter_plate_number" xml:space="preserve">
    <value>For adding new vehicle to the garage please enter plate number:</value>
  </data>
  <data name="false_option" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="invalid_menu_choice" xml:space="preserve">
    <value>You choose an option that doesn't exist</value>
  </data>
  <data name="menu_format" xml:space="preserve">
    <value>{0}) {1}</value>
  </data>
  <data name="menu_options_1" xml:space="preserve">
    <value>Add new vehicle</value>
  </data>
  <data name="menu_options_2" xml:space="preserve">
    <value>Show list of all plates</value>
  </data>
  <data name="menu_options_3" xml:space="preserve">
    <value>Change vehicle properties</value>
  </data>
  <data name="menu_options_4" xml:space="preserve">
    <value>Inflating vehicle wheel</value>
  </data>
  <data name="menu_options_5" xml:space="preserve">
    <value>Fuel vehicle</value>
  </data>
  <data name="menu_options_6" xml:space="preserve">
    <value>Charge vehicle</value>
  </data>
  <data name="menu_options_7" xml:space="preserve">
    <value>Show all vehicles details</value>
  </data>
  <data name="menu_options_8" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="plate_didnt_found" xml:space="preserve">
    <value>Sorry but the plate {0} didn't find in our system! Create new vehicle:</value>
  </data>
  <data name="plate_found" xml:space="preserve">
    <value>The vehicle with plate number {0} is already found in system, Move vehicle to status repair</value>
  </data>
  <data name="title_red" xml:space="preserve">
    <value>Red</value>
  </data>
  <data name="true_option" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="title_black" xml:space="preserve">
    <value>Black</value>
  </data>
  <data name="title_blue" xml:space="preserve">
    <value>Blue</value>
  </data>
  <data name="title_gray" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="get_license_massage" xml:space="preserve">
    <value>Enter License number</value>
  </data>
  <data name="license_a" xml:space="preserve">
    <value>A</value>
  </data>
  <data name="license_a1" xml:space="preserve">
    <value>A1</value>
  </data>
  <data name="license_a2" xml:space="preserve">
    <value>A2</value>
  </data>
  <data name="license_b" xml:space="preserve">
    <value>B</value>
  </data>
  <data name="engine_capacity_massage" xml:space="preserve">
    <value>Enter engine capacity</value>
  </data>
  <data name="choose_car_color" xml:space="preserve">
    <value>Please choose your car color</value>
  </data>
  <data name="choose_door_number" xml:space="preserve">
    <value>Please choose door number for your car</value>
  </data>
  <data name="five_doors" xml:space="preserve">
    <value>Five doors</value>
  </data>
  <data name="four_doors" xml:space="preserve">
    <value>Four doors</value>
  </data>
  <data name="octan_95" xml:space="preserve">
    <value>Octan 95</value>
  </data>
  <data name="octan_96" xml:space="preserve">
    <value>Octan 96</value>
  </data>
  <data name="octan_98" xml:space="preserve">
    <value>Octan 98</value>
  </data>
  <data name="soler" xml:space="preserve">
    <value>Soler</value>
  </data>
  <data name="three_doors" xml:space="preserve">
    <value>Third doors</value>
  </data>
  <data name="two_doors" xml:space="preserve">
    <value>Two doors</value>
  </data>
  <data name="amount_fuel_massage" xml:space="preserve">
    <value>How much fuel would you like to fuel</value>
  </data>
  <data name="amount_to_fill_tire" xml:space="preserve">
    <value>Please enter the amount you want to fill the tires:</value>
  </data>
  <data name="change_status_options" xml:space="preserve">
    <value>Your current status is {0}, Please choose new status for car</value>
  </data>
  <data name="fixed_title" xml:space="preserve">
    <value>Fixed</value>
  </data>
  <data name="inrepair_title" xml:space="preserve">
    <value>InRapair</value>
  </data>
  <data name="paid_title" xml:space="preserve">
    <value>Paid</value>
  </data>
</root>